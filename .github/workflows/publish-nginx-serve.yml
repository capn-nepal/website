name: Publish nginx serve image

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*

permissions:
  packages: write


jobs:
  publish_image:
    name: Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
        # with:
        #   submodules: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Prepare Docker
        id: prep
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed 's|:|-|' | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g' | cut -c1-100 | sed 's/-*$//')

          GIT_HASH="c$(echo $GITHUB_SHA | head -c7)"

          # XXX: Check if there is a slash in the BRANCH_NAME eg: project/add-docker
          if [[ "$BRANCH_NAME" == *"/"* ]]; then
              # XXX: Change the docker image package to -dev
              IMAGE_NAME="$IMAGE_NAME-dev"
              TAG="$(echo "$BRANCH_NAME" | sed 's|/|-|g').$(echo $GIT_HASH)"
          else
              TAG="$BRANCH_NAME.$(echo $GIT_HASH)"
          fi

          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "tagged_image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "tagged_image=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT
          echo "::notice::Tagged docker image: ${IMAGE_NAME}:${TAG}"

      - name: 🐳 Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-refs/develop
            ${{ runner.os }}-buildx-

      - name: 🐳 Docker build
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          target: nginx-serve
          load: true
          push: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: 🐳 Move docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
